<!-- kv3 encoding:text:version{e21c7f3c-8a33-41c5-9977-a76d3a32aa0d} format:vrfunknown:version{354e36cb-dbe4-41c0-8fe3-2279dd194022} -->
{
	m_Cells = 
	[
		{
			_class = "CPulseCell_Inflow_GameEvent"
			m_nEditorNodeID = 35
			m_EntryChunk = 0
			m_RegisterMap = 
			{
				m_Inparams = null
				m_Outparams = 
				{
					weapon = 2
				}
			}
			m_EventName = "player_death"
			m_Args = 
			[
				"test",
				"test2"
			]
		},

		{
			_class = "CPulseCell_Inflow_Method"
			m_nEditorNodeID = 88
			m_EntryChunk = 0
			m_RegisterMap = 
			{
				m_Inparams = null
				m_Outparams = null
			}
			m_MethodName = "TriggerCheck"
			m_Description = ""
			m_EventName = ""
			m_bIsPublic = true
			m_ReturnType = "PVAL_INVALID"
			m_Args = 
			[
			]
		},
	]
	m_DomainIdentifier = "ServerPointEntity"
	m_ParentMapName = ""
	m_Vars = 
	[
	]
	m_PublicOutputs = 
	[
	]
	m_InvokeBindings = 
	[
		
		{
			m_RegisterMap = 
			{
				m_Inparams = 
				{
					pTarget = 0
					pAction = 1
					pValue = 2
				}
				m_Outparams = null
			}
			m_FuncName = "CCSPulseServerFuncs_Globals!EntFireBroadcast"
			m_nCellIndex = -1
			m_InstanceType = "PVAL_INVALID"
			m_nSrcChunk = -1
			m_nSrcInstruction = -1
		},
		
	]
	m_CallInfos = 
	[
	]
	m_OutputConnections = 
	[
	]
	m_Chunks = 
	[
		{
			m_Instructions =
			[
			// Use this instruction as reference, you do not need to provide every value here, only those that are needed.
				{
					m_nCode = "NOP"
					m_nVar = -1 
					m_nReg0 = -1 // usually input register / output register - For binary ops like ADD, SUB, it's the output register while others are operands
					m_nReg1 = -1 // usually the first input value
					m_nReg2 = -1 // usually second input value
					m_nInvokeBindingIndex = -1 // The index of call in the InvokeBindings section if approperiate to the instruction
					m_nChunk = -1 
					m_nDestInstruction = 0
					m_nCallInfoIndex = -1 // if we're using PULSE_CALL_* then it's the index to the CallInfo section
					m_Arg0Name = ""
					m_Arg1Name = ""
					// Below we have literal values, mostly useful when setting up a register or something.
					m_bLiteralBool = false
					m_nLiteralInt = 0
					m_flLiteralFloat = 0.000000
					m_LiteralString = ""
					m_vLiteralVec3 = 
					[
						0.000000,
						0.000000,
						0.000000,
					]
				},

				{
					m_nCode = "SET_REGISTER_LIT_STR"
					m_nReg0 = 0
					m_LiteralString = "speedtext"
				},
				{
					m_nCode = "SET_REGISTER_LIT_STR"
					m_nReg0 = 1
					m_LiteralString = "SetMessage"
				},
				{
					m_nCode = "LIBRARY_INVOKE"
					m_nInvokeBindingIndex = 0
				},
				{
					m_nCode = "RETURN_VOID"
				},
				{
					m_nCode = "RETURN_VOID"
				},
			]
			m_Registers = 
			[
				{
					m_nReg = 0
					m_Type = "PVAL_STRING"
					m_OriginName = "3:pTarget"
					m_nWrittenByInstruction = 1
					m_nLastReadByInstruction = -1
				},
				
				{
					m_nReg = 1
					m_Type = "PVAL_STRING"
					m_OriginName = "3:pAction"
					m_nWrittenByInstruction = 2
					m_nLastReadByInstruction = -1
				},
				
				{
					m_nReg = 2
					m_Type = "PVAL_STRING"
					m_OriginName = "3:pValue"
					m_nWrittenByInstruction = 3
					m_nLastReadByInstruction = -1
				},
			]
			m_InstructionEditorIDs = 
			[
				35,
				88,
				3,
				3,
				3,
			]
		},
	]
}